FORMAT: 1A
HOST: https://www.monitoring-assistance.com/api/v1

# Monitoring Assistance

Welcome to Monitoring Assistance API.

First of all, you need to create your own API key through your Monitoring Assistance Dashboard to use this API.
[Dashboard > My Account > API Keys > Generate new API Key]. 

## Customers [/customers]

### Verify if a customer exists [POST /customers/login]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
            
+ Parameters 
    
    + email: `email` (string, required) - The email of the Customer is used as login
    + password: `password` (string, required) - The password of the Customer


+ Response 200 (application/json)

    + Attributes
        - success: `1` (boolean) - Define if the call is done correctly or not. If 0, you will have an explanation
        - explanation: `` (string) - When an error occurs, this field is not empty
        - data:
            - collection:
                - id: `1` (number) - id of Customer
                - first_name: `CÃ©dric` (string) - Firstname of the Customer
                - last_name: `Dupont` (string) - Lastname of the Customer
                - email: `info@monitoring-assistance.com` (string) - Email of the Customer
                - language_code: `fr` (string) - Language of the Customer
                - Installation:
                    - count: `1` (number) - number of installations found for the customer
                    - data:
                        - id: `1` (number) - id of Installation
                        - name: `CTC` (string) - name of the Installation
                        - is_active: `1` (number) - Installation is active or not
                        - external_id: `105` (number) - Id from the external database
                        - longitude: `51.02654` (string) - longitude of the installation
                        - latitude: `5.694` (string) - latitude of the installation
                        - installed_at: 
                            - date: `2017-02-10` (string) - Installation date of the Installation
                            - timezone_type: `3` (number) - Internal use
                            - timezone: `UTC` (string) - Timezone of the installation
                        - Monitoring System:
                            - count: `1` (number) - number of monitoring systems found for the installation
                            - data:
                                - id: `1` (number) - id of Monitoring System
                                - timezone: `UTC` (string) - timezone of Monitoring System
                                - serial_number: `8600548654` (string) - serial number of Monitoring System
                                - is_active: `1` (number) - Monitoring System is active or not
                                - last_connection_at: `2017-02-10 00:00:01` (string) - Last connection date of Monitoring System 
                                - type:
                                    - type: `GreenBox GV` (string) - Type of Monitoring System
                                    - transfer_technology: `GPRS` (string) - Type of transfer technology
                                - devices:
                                    - count: `1` (number) - number of devices found for the monitoring system
                                    - data:
                                        - id: `1` (number) - id of Device
                                        - serial_number: `789-985` (string) - Serial number of Device
                                        - description: `Swimming Pool Monitoring` (string) - Device description
                                        - pulse_ratio: `1000` (number) - Device pulse ratio 
                                        - personal_color: `#656565` (string) - Define a personal color for the graphics for this device
                                        - power: `100` (number) - Power of the device (Inverter for example, 15 kWp)
                                        - is_active: `1` (number) - Define if the device is active or not
                                        - is_injection: `true` (string) - Define if the device is an injection or not
                                        - is_production: `true` (string) - Define if the device is a production of energy or not
                                        - production_type: `photovoltaic` (string) - define the type of production
                                        - index: `10` (number) - define the index of the meter when the monitoring system was installed
                                        - index_euro: `10` (number) - index converted in EUR
                                        - brand: `schneider` (string) - brand of the device
                                        - model: `PM800` (string) - model of the device
                                        - type: `Water Meter` (string) - Type of Device
                                        - unit: `L` (string) - Unit of the measurand
                                        - photovoltaic_roofs:
                                            - count: `1` (number) - number of pv roofs found for the device
                                            - data:
                                                - direction: `5` (number) - Number of degrees from South (0 is the South)
                                                - angle: `35` (number) - Number of degrees for the angle. 0 is horizontal.
                                                - panel_power: `250` (number) - Power of each panel
                                                - string_configuration: `1:1` (string) - String configuration on the inverter
                                                - panel_number: `10` (number) - Number of panels installed on the string
                                                - panel_brand: `Sunpower` (string) - Brand of the panels
                                                - panel_type: `Black` (string) - Type of panel (Black, Blue, ...)
                                                - theoretical_data:
                                                    - Theoretical production in kWh for each month of the year
                                                    - theoretical_year: `9457` (number) - production in kWh for the year
                                                    - theoretical_index: `60162` (number) - Theoretical Index
                                                    - theoretical_index_euro: `33690` (number) - Index converted in EUR
                                        - photovoltaic_roofs_globals: - present only if there is at least one photovoltaic roof
                                            - theoretical_index: `154788` (number) - Theoretical Index for all photovoltaic roofs (Sum of them)
                                            - theoretical_index_euro: `35214` (number) - Theoretical Index in EUR for all photovoltaic roofs (Sum of them)

                

## Prospects [/prospects]

### Create a prospect [POST /prospect/create]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
            
+ Parameters 
    
    + prospect_login: `email` (string, required) - Prospect's email is used as login
    + prospect_password: `password` (string, required) - Password
    + prospect_first_name: `alex` (string, required) - Firstname
    + prospect_last_name: `dupont` (string, required) - Lastname
    + prospect_language_code: `FR` (string, required) - Language Code
    + prospect_address_name: `Home` (string, required) - Name of the address
    + prospect_address_street: `Rue des patates` (string, required) - Street
    + prospect_address_street_number: `103` (number, required) - Street number
    + prospect_address_box: `2` (number, optional) - Street box number
    + prospect_address_city: `Bruxelles` (string, required) - City
    + prospect_address_zip: `1083` (number, required) - Postal Code
    + prospect_address_country_code: `BE` (string, required) - Country code
    + prospect_address_phone: `042587545` (string, required) - Phone
    + prospect_installation_name: `PV Installation` (string, required) - Name of the installation
    + prospect_installation_date: `2017-04-17` (string, required) - Creation date of the installation
    + prospect_installation_power: `10` (string, required) - Power
    + prospect_installation_longitude: `4.3010108` (string, required) - Longitude
    + prospect_installation_latitude: `50.8697362` (string, required) - Latitude
    + prospect_installation_direction: `0` (string, required) - Direction
    + prospect_installation_angle: `30` (string, required) - Angle

+ Response 200 (application/json)

    + Attributes
        - success: `1` (boolean) - Define if the call is done correctly or not. If 0, you will have an explanation
        - explanation: `` (string) - When an error occurs, this field is not empty
        
### Update a prospect [POST /prospect/update]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
            
+ Parameters 
    
    + prospect_login: `email` (string, required) - Prospect's email is used as login
    + prospect_password: `password` (string, required) - Password
    + prospect_first_name: `alex` (string, required) - Firstname
    + prospect_last_name: `dupont` (string, required) - Lastname
    + prospect_language_code: `FR` (string, required) - Language Code
    + prospect_address_name: `Home` (string, required) - Name of the address
    + prospect_address_street: `Rue des patates` (string, required) - Street
    + prospect_address_street_number: `103` (number, required) - Street number
    + prospect_address_box: `2` (number, optional) - Street box number
    + prospect_address_city: `Bruxelles` (string, required) - City
    + prospect_address_zip: `1083` (number, required) - Postal Code
    + prospect_address_country_code: `BE` (string, required) - Country code
    + prospect_address_phone: `042587545` (string, required) - Phone
    + prospect_installation_name: `PV Installation` (string, required) - Name of the installation
    + prospect_installation_date: `2017-04-17` (string, required) - Creation date of the installation
    + prospect_installation_power: `10` (string, required) - Power
    + prospect_installation_longitude: `4.3010108` (string, required) - Longitude
    + prospect_installation_latitude: `50.8697362` (string, required) - Latitude
    + prospect_installation_direction: `0` (string, required) - Direction
    + prospect_installation_angle: `30` (string, required) - Angle

+ Response 200 (application/json)

    + Attributes
        - success: `1` (boolean) - Define if the call is done correctly or not. If 0, you will have an explanation
        - explanation: `` (string) - When an error occurs, this field is not empty


## Installations [/installations]

### List All Installations [GET]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}


+ Response 200 (application/json)

    + Attributes
        - success: `1` (boolean) - Define if the call is done correctly or not. If 0, you will have an explanation
        - explanation: `` (string) - When an error occurs, this field is not empty
        - count: `1` (number) - number of installations
        - data:
            - id: `1` (number) - id of Installation
            - name: `CTC` (string) - name of the Installation
            - is_active: `1` (number) - Installation is active or not
            - external_id: `105` (number) - Id from the external database
            - longitude: `51.02654` (string) - longitude of the installation
            - latitude: `5.694` (string) - latitude of the installation
            - installed_at: 
                - date: `2017-02-10` (string) - Installation date of the Installation
                - timezone_type: `3` (number) - Internal use
                - timezone: `UTC` (string) - Timezone of the installation
            - Monitoring System:
                - count: `1` (number) - number of monitoring systems found for the installation
                - data:
                    - id: `1` (number) - id of Monitoring System
                    - timezone: `UTC` (string) - timezone of Monitoring System
                    - serial_number: `8600548654` (string) - serial number of Monitoring System
                    - is_active: `1` (number) - Monitoring System is active or not
                    - last_connection_at: `2017-02-10 00:00:01` (string) - Last connection date of Monitoring System 
                    - type:
                        - type: `GreenBox GV` (string) - Type of Monitoring System
                        - transfer_technology: `GPRS` (string) - Type of transfer technology
                    - devices:
                        - count: `1` (number) - number of devices found for the monitoring system
                        - data:
                            - id: `1` (number) - id of Device
                            - serial_number: `789-985` (string) - Serial number of Device
                            - description: `Swimming Pool Monitoring` (string) - Device description
                            - pulse_ratio: `1000` (number) - Device pulse ratio 
                            - personal_color: `#656565` (string) - Define a personal color for the graphics for this device
                            - power: `100` (number) - Power of the device (Inverter for example, 15 kWp)
                            - is_active: `1` (number) - Define if the device is active or not
                            - is_injection: `true` (string) - Define if the device is an injection or not
                            - is_production: `true` (string) - Define if the device is a production of energy or not
                            - production_type: `photovoltaic` (string) - define the type of production
                            - index: `10` (number) - define the index of the meter when the monitoring system was installed
                            - index_euro: `10` (number) - index converted in EUR
                            - brand: `schneider` (string) - brand of the device
                            - model: `PM800` (string) - model of the device
                            - type: `Water Meter` (string) - Type of Device
                            - unit: `L` (string) - Unit of the measurand
                            - photovoltaic_roofs:
                                - count: `1` (number) - number of pv roofs found for the device
                                - data:
                                    - direction: `5` (number) - Number of degrees from South (0 is the South)
                                    - angle: `35` (number) - Number of degrees for the angle. 0 is horizontal.
                                    - panel_power: `250` (number) - Power of each panel
                                    - string_configuration: `1:1` (string) - String configuration on the inverter
                                    - panel_number: `10` (number) - Number of panels installed on the string
                                    - panel_brand: `Sunpower` (string) - Brand of the panels
                                    - panel_type: `Black` (string) - Type of panel (Black, Blue, ...)
                                    - theoretical_data:
                                        - Theoretical production in kWh for each month of the year
                                        - theoretical_year: `9457` (number) - production in kWh for the year
                                        - theoretical_index: `60162` (number) - Theoretical Index
                                        - theoretical_index_euro: `33690` (number) - Index converted in EUR
                            - photovoltaic_roofs_globals: - present only if there is at least one photovoltaic roof
                                - theoretical_index: `154788` (number) - Theoretical Index for all photovoltaic roofs (Sum of them)
                                - theoretical_index_euro: `35214` (number) - Theoretical Index in EUR for all photovoltaic roofs (Sum of them)

                        
### Get Theorical Index [POST /installations/theorical-index]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
            
       
+ Parameters

    + latitude: `50.5` (number, required) - latitude of the installation
    + longitude: `4.4` (number, required) - longitude of the installation
    + angle: `35` (number, required) - angle of the PV installation
    + direction: `180` (number, required) - Direction of the PV installation (180Â° = South)
    + installation_power: `50000` (number, required) - Power of the PV installation (in Wc)
    + installation_date: `2017-02-02` (string, required) - Installation date of the PV installation
    
    
+ Response 200 (application/json)

    + Attributes
        - success: `1` (boolean) - Define if the call is done correctly or not. If 0, you will have an explanation
        - explanation: `` (string) - When an error occurs, this field is not empty
        - data:
            - theoretical_index: `9214.2` (number) - Define the index of the electrical meter today
        
### Get Coordinates [POST /installations/coordinates]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
            
       
+ Parameters

    + street_name: `rue de termonde` (string, required) - street
    + street_number: `140` (number, required) - street number
    + city: `bruxelles` (string, required) - city
    + zip: `180` (number, required) - zip code
    + country_code: `BE` (string, required) - country code
    
    
+ Response 200 (application/json)

     + Attributes
        - success: `1` (boolean) - Define if the call is done correctly or not. If 0, you will have an explanation
        - explanation: `` (string) - When an error occurs, this field is not empty
        - data:
            - latitude: `50` (number) - latitude
            - longitude: `4` (number) - longitude

## Monitoring Systems [/monitoring-systems]


### List All Devices linked to a Monitoring System [GET /monitoring-systems/{serial_number}/devices]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}

+ Parameters

    + serial_number: `1` (number, required) - The serial number of monitoring system to retrieve all linked devices
    
+ Response 200 (application/json)

    + Attributes
        - success: `1` (boolean) - Define if the call is done correctly or not. If 0, you will have an explanation
        - explanation: `` (string) - When an error occurs, this field is not empty
        - count: `1` (number) - number of devices
        - data:
            - id: `1` (number) - id of Device
            - serial_number: `789-985` (string) - Serial number of Device
            - description: `Swimming Pool Monitoring` (string) - Device description
            - pulse_ratio: `1000` (number) - Device pulse ratio 
            - personal_color: `#656565` (string) - Define a personal color for the graphics for this device
            - power: `100` (number) - Power of the device (Inverter for example, 15 kWp)
            - is_active: `1` (number) - Define if the device is active or not
            - is_injection: `true` (string) - Define if the device is an injection or not
            - is_production: `true` (string) - Define if the device is a production of energy or not
            - production_type: `photovoltaic` (string) - define the type of production
            - index: `10` (number) - define the index of the meter when the monitoring system was installed
            - index_euro: `10` (number) - index converted in EUR
            - brand: `schneider` (string) - brand of the device
            - model: `PM800` (string) - model of the device
            - type: `Water Meter` (string) - Type of Device
            - unit: `L` (string) - Unit of the measurand
            - photovoltaic_roofs:
                - count: `1` (number) - number of pv roofs found for the device
                - data:
                    - direction: `5` (number) - Number of degrees from South (0 is the South)
                    - angle: `35` (number) - Number of degrees for the angle. 0 is horizontal.
                    - panel_power: `250` (number) - Power of each panel
                    - string_configuration: `1:1` (string) - String configuration on the inverter
                    - panel_number: `10` (number) - Number of panels installed on the string
                    - panel_brand: `Sunpower` (string) - Brand of the panels
                    - panel_type: `Black` (string) - Type of panel (Black, Blue, ...)
                    - theoretical_data:
                        - Theoretical production in kWh for each month of the year
                        - theoretical_year: `9457` (number) - production in kWh for the year
                        - theoretical_index: `60162` (number) - Theoretical Index
                        - theoretical_index_euro: `33690` (number) - Index converted in EUR
            - photovoltaic_roofs_globals: - present only if there is at least one photovoltaic roofWith 
                - theoretical_index: `154788` (number) - Theoretical Index for all photovoltaic roofs (Sum of them)
                - theoretical_index_euro: `35214` (number) - Theoretical Index in EUR for all photovoltaic roofs (Sum of them)

## Devices [/devices/{id}/show]

### Get Data by day for a Device [POST /devices/{id}/day/show]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
            
    + Body 
    
            timeframe
       
+ Parameters

    + id: `1` (number, required) - The id of device to retrieve all necessary data
    + timeframe: `2016-08-30` (string, required) - Specify the day to retrieve data
    
+ Response 200 (application/json)

    + Attributes
        - date: `2017-06-21` (string) - Define the current date
        - x: `00h00` (string) - x value axis
        - y: `120` (number) - y value axis (null if no data available)
        - color: `#d4e90f` (string) - Define the color on graphic
        - unit: `kWh` (string)
        - qf: `100` (number) - Quality Factor (internal use)
        - tz: `Europe/Brussels` (string) - TimeZone
        - iv: `false` (string) - Define if the value is interpolated
        - url: (string) - Quick link in javascript (internal use)
            
### Get Data by month for a Device [POST /devices/{id}/month/show]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
            
    + Body 
    
            timeframe
       
+ Parameters

    + id: `1` (number, required) - The id of device to retrieve all necessary data
    + timeframe: `2016-08` (string, required) - Specify the month to retrieve data
    
+ Response 200 (application/json)

    + Attributes
        - date: `2017-06-21` (string) - Define the current date
        - x: `1` (string) - x value axis
        - y: `120` (number) - y value axis (null if no data available)
        - color: `#d4e90f` (string) - Define the color on graphic
        - unit: `kWh` (string)
        - qf: `100` (number) - Quality Factor (internal use)
        - tz: `Europe/Brussels` (string) - TimeZone 
        - iv: `false` (string) - Define if the value is interpolated
        - url: (string) - Quick link in javascript (internal use)

### Get Data by year for a Device [POST /devices/{id}/year/show]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
            
    + Body 
    
            timeframe
       
+ Parameters

    + id: `1` (number, required) - The id of device to retrieve all necessary data
    + timeframe: `2016` (string, required) - Specify the year to retrieve data
    
+ Response 200 (application/json)

    + Attributes
        - date: `2017` (string) - Define the current date
        - x: `2017` (string) - x value axis
        - y: `120` (number) - y value axis (null if no data available)
        - color: `#d4e90f` (string) - Define the color on graphic
        - unit: `kWh` (string)
        - qf: `100` (number) - Quality Factor (internal use)
        - tz: `Europe/Brussels` (string) - TimeZone
        - iv: `false` (string) - Define if the value is interpolated
        - url: (string) - Quick link in javascript (internal use)
                
                
### Get Data by year range for a Device [POST /devices/{id}/year-range/show]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
            
    + Body 
    
            timeframe
       
+ Parameters

    + id: `1` (number, required) - The id of device to retrieve all necessary data
    + timeframe: `2000-2016` (string, optional) - Specify the year range to retrieve data
    
+ Response 200 (application/json)

    + Attributes
        - date: `2017` (string) - Define the current date
        - x: `Jan` (string) - x value axis
        - y: `120` (number) - y value axis (null if no data available)
        - color: `#d4e90f` (string) - Define the color on graphic
        - unit: `kWh` (string)
        - qf: `100` (number) - Quality Factor (internal use)
        - tz: `Europe/Brussels` (string) - TimeZone
        - iv: `false` (string) - Define if the value is interpolated
        - url: (string) - Quick link in javascript (internal use)
    

### Get total Data for a Device [POST /devices/{id}/total/show]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
            
       
+ Parameters

    + id: `1` (number, required) - The id of device to retrieve all necessary data
    
    
+ Response 200 (application/json)

    + Attributes
        - date: `Total` (string) - Define the current date
        - x: `Total` (string) - x value axis
        - y: `786` (number) - y value axis (null if no data available)
        - color: `#d4e90f` (string) - Define the color on graphic
        - qf: `100` (number) - Quality Factor (internal use)
        - tz: `Europe/Brussels` (string) - TimeZone
        - iv: `false` (string) - Define if the value is interpolated
        - url: (string) - Quick link in javascript (internal use)
        
        ## Devices [/devices/{id}/show]